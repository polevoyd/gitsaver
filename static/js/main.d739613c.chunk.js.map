{"version":3,"sources":["components/Welcome.js","components/BoardCell.js","components/Board.js","components/ColorSwitch.js","components/BoardArea.js","components/Results.js","components/Instructions.js","components/FAQ.js","components/ExamplesBoard.js","components/App.js","index.js"],"names":["Welcome","props","react_default","a","createElement","className","onClick","switchFaq","style","faqIsOn","backgroundColor","buttonColor","BoardCell","num","numToColor","board","index","concat","e","updateBoard","color","colorToNum","Board","arrayOfCells","map","i","components_BoardCell","key","ColorSwitch","id","setColor","BoardArea","cleanBoard","switchSamples","components_Board","components_ColorSwitch","Results","scriptsArray","date","previousYear","Date","getFullYear","previousYearInSeconds","setFullYear","correctDate","previousDay","getDay","correctDayInSeconds","setDate","getDate","correctDay","finalDateInSeconds","indexToDate","toString","Array","fill","reduce","curr","acc","join","bashScript","blob","Blob","type","downloadLink","document","download","window","webkitURL","href","createObjectURL","URL","display","body","appendChild","click","readOnly","value","Instructions","target","FAQ","ExamplesBoard","App","currentBoard","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","setBoard","_useState5","_useState6","faq","toggleFaq","_useState7","_useState8","samples","toggleSamples","components_Welcome","components_BoardArea","copy","defaultBoard","components_Results","components_Instructions","components_FAQ","components_ExamplesBoard","ReactDOM","render","components_App","getElementById"],"mappings":"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","file":"static/js/main.d739613c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Welcome = (props) => {\n    const buttonColor = (props) => {\n        return props.faqIsOn ? {backgroundColor: '#d10000'} : {backgroundColor: '#89c403'};\n    }\n\n    return(\n        <div className=\"welcome\">\n            <h4 className=\"changing-colors\">gitsaver</h4> \n            <p>\n                A screensaver for your github calendar.\n            </p>\n            <button \n                onClick={props.switchFaq}\n                className=\"button-faq\" \n                style={buttonColor(props)}>\n            FAQ\n            </button>\n        </div>\n    );\n}\n\nexport default Welcome;\n","import React from 'react';\n\nconst BoardCell = (props) => {\n\n    const numToColor = num => {\n        switch (num) {\n            case 0:\n                return '#ebedf0';\n            case 1:\n                return '#c6e48b';\n            case 2: \n                return '#7bc96f';\n            case 3:\n                return '#239a3b';\n            case 4:\n                return '#196127';\n            default:\n                break;\n        }    \n    }\n\n    const colorToNum = color => {\n        switch (color) {\n            case '#ebedf0':\n                return 0;\n            case '#c6e48b':\n                return 1;\n            case '#7bc96f': \n                return 2;\n            case '#239a3b':\n                return 3;\n            case '#196127':\n                return 4;\n            default:\n                break;\n        }    \n    }\n\n    return(\n        <div \n            style={{backgroundColor: numToColor(props.board[props.index])}}\n            className={`board-cell ${props.index}`}\n            onClick={e => props.updateBoard(props.index, colorToNum(props.color))}>\n        </div>\n    );\n}\n\nexport default BoardCell;\n","import React from 'react';\nimport BoardCell from './BoardCell';\n\nconst Board = (props) => {\n\n    const arrayOfCells = props.board.map((e,i) => {\n        return(\n            <BoardCell\n                board={props.board}\n                color={props.color}\n                updateBoard={props.updateBoard}\n                key={i}\n                index={i}>\n            </BoardCell>\n        )\n    })\n    \n    return(\n        <div className=\"board\">\n            <ul className=\"squares\">\n                {arrayOfCells}\n            </ul> \n        </div>\n    );\n}\n\nexport default Board;","import React from 'react';\n\nconst ColorSwitch = (props) => {\n   \n    return(\n        <div className=\"color-switch-area\">\n            <form className=\"color-switch\">\n                <div className=\"color\" id=\"color1\" onClick={e => props.setColor('#196127')}></div>\n                <div className=\"color\" id=\"color2\" onClick={e => props.setColor('#239a3b')}></div>\n                <div className=\"color\" id=\"color3\" onClick={e => props.setColor('#7bc96f')}></div>\n                <div className=\"color\" id=\"color4\" onClick={e => props.setColor('#c6e48b')}></div>\n                <div className=\"color\" id=\"color5\" onClick={e => props.setColor('#ebedf0')}></div>\n            </form>\n        </div>\n    );\n}\n\nexport default ColorSwitch;\n","import React from 'react';\nimport Board from './Board';\nimport ColorSwitch from './ColorSwitch';\n\nconst BoardArea = (props) => {\n    return(\n        <div className=\"board-area\">\n        <div className=\"options-wrapper\">\n            <p onClick={props.cleanBoard} className=\"options\">clean</p>\n            <p onClick={props.switchSamples} className=\"options\">examples</p>\n        </div>\n            <Board\n                color={props.color}\n                board={props.board}\n                updateBoard={props.updateBoard}/>\n            <ColorSwitch \n                setColor={props.setColor}/>\n        </div>\n    );\n}\n\nexport default BoardArea;","import React from 'react';\n\nconst Results = (props) => {\n\n    const downloadScript = () => {\n        const blob = new Blob([bashScript], {type:'text/plain'});\n        const downloadLink = document.createElement(\"a\");\n        downloadLink.download = 'gitsaver';\n        if (window.webkitURL != null) {\n            downloadLink.href = window.webkitURL.createObjectURL(blob);\n        } else {\n            downloadLink.href = window.URL.createObjectURL(blob);\n            downloadLink.style.display = \"none\";\n            document.body.appendChild(downloadLink);\n        }\n        downloadLink.click();\n    }\n\n    const indexToDate = (index) => {\n        // TODO: refactor\n        const previousYear = new Date().getFullYear()-1;\n        const previousYearInSeconds = new Date().setFullYear(previousYear)\n        const correctDate = new Date(previousYearInSeconds)\n        const previousDay = correctDate.getDay();\n        const correctDayInSeconds = correctDate.setDate(correctDate.getDate()-previousDay)\n        const correctDay = new Date(correctDayInSeconds)\n        const finalDateInSeconds = correctDay.setDate(correctDay.getDate() + index);\n        const finalDate = new Date(finalDateInSeconds);\n        return finalDate;\n    }\n    \n    const scriptsArray = props.board\n    .map((e, i) => {\n        const date = indexToDate(i).toString();\n        const scripts = new Array(e * 12).fill(date);\n        return scripts;\n    })\n    .reduce((curr, acc) => {\n        return curr ? acc.concat(curr) : acc;\n    }, [])\n    .map(e => `echo \"|\" >> README.md&&git add .&&git commit -m \"gitsaver\" --date=\"${e}\"`)\n    .join('&&');\n\n    const bashScript =\n    `#!/bin/bash\nmkdir gitsaver_temp&&cd gitsaver_temp&&echo Paste link to repo:&&read link&&echo \"|\" >> README.md&&git init&&git add README.md&&${scriptsArray}&&git remote add origin $link&&git push origin master&&cd ..&&rm -r gitsaver_temp`;\n\n    return(\n        <div>\n            <button className=\"button-download\" onClick={downloadScript}>Download Script</button>\n            <textarea className=\"results\" readOnly value={bashScript}>\n            </textarea>\n        </div>\n    );\n}\n\nexport default Results;","import React from 'react';\n\nconst Instructions = () => {\n    return(\n        <div className=\"instructions\">\n            <h5>Instructions</h5>\n            <ol>\n                <li>After you finished drawing, click <button>Download Script</button> to download script file</li>\n                <li>Open terminal in same folder and run <span>chmod u+x *filename*</span> to make it executable</li>\n                <li>Create an empty repository and copy link</li>\n                <li>Enter <span>sh *filename*</span> in terminal to run script. Paste link to repo when prompt</li>\n                <li>Yay!</li>\n            </ol>\n            <a className=\"made-by-polevoy\" href=\"http://www.polevoy.in/\" target=\"_blank\">made by polevoy</a>\n        </div>\n    );\n}\n\nexport default Instructions;","import React from 'react';\n\nconst FAQ = () => {\n    return(\n        <div className=\"faq-window\">\n            <ul>\n                <li>\n                    <h4>What is that?</h4>\n                    <p>This is an app that allows you to make your GitHub board into an art. When you draw, it automatically generates a script, which will commit it into a repository you provide.</p>\n                </li>\n                <li>\n                    <h4>Why?</h4>\n                    <p>For fun. One person told me that he once had manually change commit date. I kept in in my head for a few days that idea was born. Many engineers don't care about a GH calendar and just leave it empty. I realized that this can be used as an opportunity to create something cool :)</p>\n                </li>\n                <li>\n                    <h4>Tips</h4>\n                    <p>Follow instructions on the main page and make sure you have rights to execute commands. To make it easier, just create a new repository for your gitsaver. Then, when you can just delete that repository to clean up a board.</p>\n                </li>\n            </ul>\n        </div>\n    );\n}\n\nexport default FAQ;","import React from 'react';\n\nconst ExamplesBoard = (props) => {\n    return(\n        <div className=\"examples-board\">\n            <div className=\"example-preview\">1</div>\n            <div className=\"example-preview\">2</div>\n            <div className=\"example-preview\">3</div>\n            <div className=\"example-preview\">4</div>\n            <div className=\"example-preview\">5</div>\n        </div>\n    );\n}\n\nexport default ExamplesBoard;","import React from 'react';\nimport { useState } from 'react';\nimport Welcome from './Welcome';\nimport BoardArea from './BoardArea';\nimport Results from './Results';\nimport Instructions from './Instructions';\nimport FAQ from './FAQ';\nimport ExamplesBoard from './ExamplesBoard';\n\nconst App = () => {\n  const currentColor = '#c6e48b'\n  const currentBoard = new Array(52*7).fill(0);\n  const faqIsOpened = false;\n  const samplesIsOpened = false;\n\n  const [color, setColor] = useState(currentColor)\n  const [board, setBoard] = useState(currentBoard);\n  const [faq, toggleFaq] = useState(faqIsOpened);\n  const [samples, toggleSamples] = useState(samplesIsOpened);\n\n  const updateBoard = (index, value) => {\n    let copy = board;\n    copy[index] = value;\n    return setBoard(copy);\n  }\n\n  const cleanBoard = () => {\n    const defaultBoard = new Array(52*7).fill(0);\n    return (setBoard(defaultBoard));\n  }\n\n  const switchFaq = () => {\n    return toggleFaq(!faq);\n  }\n\n  const switchSamples = () => {\n    return toggleSamples(!samples)\n  }\n\n  const closeAllWindows = () => {\n    toggleFaq(false)\n    toggleSamples(false)\n  }\n\n  return(\n    <div onClick={faq || samples ? closeAllWindows : null}>\n      <Welcome switchFaq={switchFaq} faqIsOn={faq}/>\n      <BoardArea \n        board={board}\n        color={color}\n        setColor={setColor}\n        updateBoard={updateBoard}\n        cleanBoard={cleanBoard}\n        switchSamples={switchSamples}/>\n      <Results \n        board={board}/>\n        <Instructions/>\n        {faq ? <FAQ /> : null}\n        {samples ? <ExamplesBoard/> : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}